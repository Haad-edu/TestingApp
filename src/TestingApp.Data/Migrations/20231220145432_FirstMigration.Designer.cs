// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestingApp.Data.DbContexts;

#nullable disable

namespace TestingApp.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231220145432_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestingApp.Domain.Entities.Attachments.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<long?>("QuestionId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId1");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("TestingApp.Domain.Entities.Courses.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("TestingApp.Domain.Entities.Quizes.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<string>("Option")
                        .HasColumnType("text");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<long?>("QuestionId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId1");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("TestingApp.Domain.Entities.Quizes.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.Property<long?>("QuizId1")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuizId1");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("TestingApp.Domain.Entities.Quizes.Quiz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<long?>("CourseId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("integer");

                    b.Property<int>("TimeToSolveInMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseId1");

                    b.ToTable("Quizs");
                });

            modelBuilder.Entity("TestingApp.Domain.Entities.Quizes.QuizResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.Property<long?>("QuizId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuizId1");

                    b.HasIndex("UserId1");

                    b.ToTable("QuizResults");
                });

            modelBuilder.Entity("TestingApp.Domain.Entities.Quizes.SolvedQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AnswerId")
                        .HasColumnType("integer");

                    b.Property<long?>("AnswerId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<long?>("QuestionId1")
                        .HasColumnType("bigint");

                    b.Property<int>("QuizResultId")
                        .HasColumnType("integer");

                    b.Property<long?>("QuizResultId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId1");

                    b.HasIndex("QuestionId1");

                    b.HasIndex("QuizResultId1");

                    b.ToTable("SolvedQuestions");
                });

            modelBuilder.Entity("TestingApp.Domain.Entities.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TestingApp.Domain.Entities.Attachments.Attachment", b =>
                {
                    b.HasOne("TestingApp.Domain.Entities.Quizes.Question", null)
                        .WithMany("Attachments")
                        .HasForeignKey("QuestionId1");
                });

            modelBuilder.Entity("TestingApp.Domain.Entities.Quizes.Answer", b =>
                {
                    b.HasOne("TestingApp.Domain.Entities.Quizes.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId1");
                });

            modelBuilder.Entity("TestingApp.Domain.Entities.Quizes.Question", b =>
                {
                    b.HasOne("TestingApp.Domain.Entities.Quizes.Quiz", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuizId1");
                });

            modelBuilder.Entity("TestingApp.Domain.Entities.Quizes.Quiz", b =>
                {
                    b.HasOne("TestingApp.Domain.Entities.Courses.Course", null)
                        .WithMany("Quizes")
                        .HasForeignKey("CourseId1");
                });

            modelBuilder.Entity("TestingApp.Domain.Entities.Quizes.QuizResult", b =>
                {
                    b.HasOne("TestingApp.Domain.Entities.Quizes.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId1");

                    b.HasOne("TestingApp.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestingApp.Domain.Entities.Quizes.SolvedQuestion", b =>
                {
                    b.HasOne("TestingApp.Domain.Entities.Quizes.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId1");

                    b.HasOne("TestingApp.Domain.Entities.Quizes.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId1");

                    b.HasOne("TestingApp.Domain.Entities.Quizes.QuizResult", null)
                        .WithMany("SolvedQuestions")
                        .HasForeignKey("QuizResultId1");

                    b.Navigation("Answer");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TestingApp.Domain.Entities.Courses.Course", b =>
                {
                    b.Navigation("Quizes");
                });

            modelBuilder.Entity("TestingApp.Domain.Entities.Quizes.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("TestingApp.Domain.Entities.Quizes.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("TestingApp.Domain.Entities.Quizes.QuizResult", b =>
                {
                    b.Navigation("SolvedQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
